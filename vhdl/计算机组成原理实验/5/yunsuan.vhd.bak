library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;
entity cpu is
port(input:in std_logic_vector(7 downto 0);
d:in std_logic_vector(7 downto 0);
ra:in std_logic_vector(1 downto 0);
wt,rd:in std_logic;
m:in std_logic_vector(1 downto 0);
reset,clk,sin:in std_logic;
slt:out std_logic_vector(2 downto 0);
seg:out std_logic_vector(7 downto 0);
d_out:out std_logic_vector(7 downto 0));
end ;
architecture behave of cpu is
signal r0,r1,r2,r3:std_logic_vector(7 downto 0);
signal pc,count:std_logic_vector(7 downto 0);
signal s1:std_logic_vector(3 downto 0);
signal temp,f:std_logic_vector(7 downto 0);
signal sel:std_logic_vector(2 downto 0);
signal data:std_logic_vector(3 downto 0);
begin
process(input,d,ra,wt,rd,m,reset,sin)
begin
s1 <= ra(1) & ra(0) & wt & rd;
if clk'event and clk='0' then
if sin = '0' then
temp <= d;
else temp <= input;
end if;
case s1 is
when "0001" => r0 <= temp;
when "0010" => f <= r0;
when "0101" => r1 <= temp;
when "0110" => f <= r1;
when "1001" => r2 <= temp; 
when "1010" => f <= r2; 
when "1101" => r3 <= temp; 
when "1110" => f <= r3; 
when "1111" => f <= pc; 
when others => null; 
end case; 
d_out <= f; 
if reset='0' then 
pc <= "00000000"; 
else 
case m is 
when "00" => pc <= temp; 
when "01" => pc <= (pc + 1); 
when "10" => pc <= (pc - 1); 
when others => null; 
end case; 
end if; 
sel <= sel + 1; 
if sel>="001" then 
sel <= "000"; 
end if; slt <= sel; 
case sel is 
when "000" => data <= f(7 downto 4); 
when "001" => data <= f(3 downto 0); 
when others => null; 
end case; 
end if; 
case data is 
when "0000" => seg <= "00111111"; 
when "0001" => seg <= "00000110"; 
when "0010" => seg <= "01011011"; 
when "0011" => seg <= "01001111"; 
when "0100" => seg <= "01100110"; 
when "0110" => seg <= "01111101"; 
when "0111" => seg <= "00000111"; 
when "1000" => seg <= "01111111"; 
when "1001" => seg <= "01101111"; 
when "1010" => seg <= "01110111"; 
when "1011" => seg <= "01111100"; 
when "1100" => seg <= "00111001"; 
when "1101" => seg <= "01011110";
when "1110" => seg <= "01111001";
when "1111" => seg <= "01110001";
when others => null;
end case;
end process; 
end;